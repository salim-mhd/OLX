{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _utils = require('../utils');\n\nexports['default'] = function (instance) {\n  instance.registerHelper('if', function (conditional, options) {\n    if (_utils.isFunction(conditional)) {\n      conditional = conditional.call(this);\n    } // Default behavior is to render the positive path if the value is truthy and not empty.\n    // The `includeZero` option may be set to treat the condtional as purely not empty based on the\n    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.\n\n\n    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {\n      return options.inverse(this);\n    } else {\n      return options.fn(this);\n    }\n  });\n  instance.registerHelper('unless', function (conditional, options) {\n    return instance.helpers['if'].call(this, conditional, {\n      fn: options.inverse,\n      inverse: options.fn,\n      hash: options.hash\n    });\n  });\n};\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["../../../../lib/handlebars/helpers/if.js"],"names":[],"mappings":";;;;qBAAkC,U;;qBAEnB,UAAS,QAAT,EAAmB;AAChC,EAAA,QAAQ,CAAC,cAAT,CAAwB,IAAxB,EAA8B,UAAS,WAAT,EAAsB,OAAtB,EAA+B;AAC3D,QAAI,MAAA,CAAA,UAAA,CAAW,WAAX,CAAJ,EAA6B;AAAE,MAAA,WAAW,GAAG,WAAW,CAAC,IAAZ,CAAiB,IAAjB,CAAd;AAAuC,KADX,C;;;;;AAM3D,QAAK,CAAC,OAAO,CAAC,IAAR,CAAa,WAAd,IAA6B,CAAC,WAA9B,IAA8C,MAAA,CAAA,OAAA,CAAQ,WAAR,CAAnD,EAAyE;AACvE,aAAO,OAAO,CAAC,OAAR,CAAgB,IAAhB,CAAP;AACD,KAFD,MAEO;AACL,aAAO,OAAO,CAAC,EAAR,CAAW,IAAX,CAAP;AACD;AACF,GAXD;AAaA,EAAA,QAAQ,CAAC,cAAT,CAAwB,QAAxB,EAAkC,UAAS,WAAT,EAAsB,OAAtB,EAA+B;AAC/D,WAAO,QAAQ,CAAC,OAAT,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,IAA5B,EAAkC,WAAlC,EAA+C;AAAC,MAAA,EAAE,EAAE,OAAO,CAAC,OAAb;AAAsB,MAAA,OAAO,EAAE,OAAO,CAAC,EAAvC;AAA2C,MAAA,IAAI,EAAE,OAAO,CAAC;AAAzD,KAA/C,CAAP;AACD,GAFD;AAGD,C","sourcesContent":["import {isEmpty, isFunction} from '../utils';\n\nexport default function(instance) {\n  instance.registerHelper('if', function(conditional, options) {\n    if (isFunction(conditional)) { conditional = conditional.call(this); }\n\n    // Default behavior is to render the positive path if the value is truthy and not empty.\n    // The `includeZero` option may be set to treat the condtional as purely not empty based on the\n    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.\n    if ((!options.hash.includeZero && !conditional) || isEmpty(conditional)) {\n      return options.inverse(this);\n    } else {\n      return options.fn(this);\n    }\n  });\n\n  instance.registerHelper('unless', function(conditional, options) {\n    return instance.helpers['if'].call(this, conditional, {fn: options.inverse, inverse: options.fn, hash: options.hash});\n  });\n}\n"]},"metadata":{},"sourceType":"script"}