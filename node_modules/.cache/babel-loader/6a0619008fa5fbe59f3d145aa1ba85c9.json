{"ast":null,"code":"/**\n * Module dependencies.\n */\nconst tty = require('tty');\n\nconst util = require('util');\n/**\n * This is the Node.js implementation of `debug()`.\n */\n\n\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.destroy = util.deprecate(() => {}, 'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\ntry {\n  // Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)\n  // eslint-disable-next-line import/no-extraneous-dependencies\n  const supportsColor = require('supports-color');\n\n  if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {\n    exports.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221];\n  }\n} catch (error) {// Swallow - we only care if `supports-color` is available; it doesn't have to be.\n}\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\n\nexports.inspectOpts = Object.keys(process.env).filter(key => {\n  return /^debug_/i.test(key);\n}).reduce((obj, key) => {\n  // Camel-case\n  const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {\n    return k.toUpperCase();\n  }); // Coerce string value into JS value\n\n  let val = process.env[key];\n\n  if (/^(yes|on|true|enabled)$/i.test(val)) {\n    val = true;\n  } else if (/^(no|off|false|disabled)$/i.test(val)) {\n    val = false;\n  } else if (val === 'null') {\n    val = null;\n  } else {\n    val = Number(val);\n  }\n\n  obj[prop] = val;\n  return obj;\n}, {});\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n  return 'colors' in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);\n}\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\n\nfunction formatArgs(args) {\n  const {\n    namespace: name,\n    useColors\n  } = this;\n\n  if (useColors) {\n    const c = this.color;\n    const colorCode = '\\u001B[3' + (c < 8 ? c : '8;5;' + c);\n    const prefix = `  ${colorCode};1m${name} \\u001B[0m`;\n    args[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n    args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\\u001B[0m');\n  } else {\n    args[0] = getDate() + name + ' ' + args[0];\n  }\n}\n\nfunction getDate() {\n  if (exports.inspectOpts.hideDate) {\n    return '';\n  }\n\n  return new Date().toISOString() + ' ';\n}\n/**\n * Invokes `util.format()` with the specified arguments and writes to stderr.\n */\n\n\nfunction log(...args) {\n  return process.stderr.write(util.format(...args) + '\\n');\n}\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\n\nfunction save(namespaces) {\n  if (namespaces) {\n    process.env.DEBUG = namespaces;\n  } else {\n    // If you set a process.env field to null or undefined, it gets cast to the\n    // string 'null' or 'undefined'. Just delete instead.\n    delete process.env.DEBUG;\n  }\n}\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\n\nfunction load() {\n  return process.env.DEBUG;\n}\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\n\nfunction init(debug) {\n  debug.inspectOpts = {};\n  const keys = Object.keys(exports.inspectOpts);\n\n  for (let i = 0; i < keys.length; i++) {\n    debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n  }\n}\n\nmodule.exports = require('./common')(exports);\nconst {\n  formatters\n} = module.exports;\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nformatters.o = function (v) {\n  this.inspectOpts.colors = this.useColors;\n  return util.inspect(v, this.inspectOpts).split('\\n').map(str => str.trim()).join(' ');\n};\n/**\n * Map %O to `util.inspect()`, allowing multiple lines if needed.\n */\n\n\nformatters.O = function (v) {\n  this.inspectOpts.colors = this.useColors;\n  return util.inspect(v, this.inspectOpts);\n};","map":{"version":3,"sources":["C:/Users/H P/Desktop/OLX/node_modules/debug/src/node.js"],"names":["tty","require","util","exports","init","log","formatArgs","save","load","useColors","destroy","deprecate","colors","supportsColor","stderr","level","error","inspectOpts","Object","keys","process","env","filter","key","test","reduce","obj","prop","substring","toLowerCase","replace","_","k","toUpperCase","val","Number","Boolean","isatty","fd","args","namespace","name","c","color","colorCode","prefix","split","join","push","module","humanize","diff","getDate","hideDate","Date","toISOString","write","format","namespaces","DEBUG","debug","i","length","formatters","o","v","inspect","map","str","trim","O"],"mappings":"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","sourcesContent":["/**\n * Module dependencies.\n */\n\nconst tty = require('tty');\nconst util = require('util');\n\n/**\n * This is the Node.js implementation of `debug()`.\n */\n\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.destroy = util.deprecate(\n\t() => {},\n\t'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'\n);\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\ntry {\n\t// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)\n\t// eslint-disable-next-line import/no-extraneous-dependencies\n\tconst supportsColor = require('supports-color');\n\n\tif (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {\n\t\texports.colors = [\n\t\t\t20,\n\t\t\t21,\n\t\t\t26,\n\t\t\t27,\n\t\t\t32,\n\t\t\t33,\n\t\t\t38,\n\t\t\t39,\n\t\t\t40,\n\t\t\t41,\n\t\t\t42,\n\t\t\t43,\n\t\t\t44,\n\t\t\t45,\n\t\t\t56,\n\t\t\t57,\n\t\t\t62,\n\t\t\t63,\n\t\t\t68,\n\t\t\t69,\n\t\t\t74,\n\t\t\t75,\n\t\t\t76,\n\t\t\t77,\n\t\t\t78,\n\t\t\t79,\n\t\t\t80,\n\t\t\t81,\n\t\t\t92,\n\t\t\t93,\n\t\t\t98,\n\t\t\t99,\n\t\t\t112,\n\t\t\t113,\n\t\t\t128,\n\t\t\t129,\n\t\t\t134,\n\t\t\t135,\n\t\t\t148,\n\t\t\t149,\n\t\t\t160,\n\t\t\t161,\n\t\t\t162,\n\t\t\t163,\n\t\t\t164,\n\t\t\t165,\n\t\t\t166,\n\t\t\t167,\n\t\t\t168,\n\t\t\t169,\n\t\t\t170,\n\t\t\t171,\n\t\t\t172,\n\t\t\t173,\n\t\t\t178,\n\t\t\t179,\n\t\t\t184,\n\t\t\t185,\n\t\t\t196,\n\t\t\t197,\n\t\t\t198,\n\t\t\t199,\n\t\t\t200,\n\t\t\t201,\n\t\t\t202,\n\t\t\t203,\n\t\t\t204,\n\t\t\t205,\n\t\t\t206,\n\t\t\t207,\n\t\t\t208,\n\t\t\t209,\n\t\t\t214,\n\t\t\t215,\n\t\t\t220,\n\t\t\t221\n\t\t];\n\t}\n} catch (error) {\n\t// Swallow - we only care if `supports-color` is available; it doesn't have to be.\n}\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\nexports.inspectOpts = Object.keys(process.env).filter(key => {\n\treturn /^debug_/i.test(key);\n}).reduce((obj, key) => {\n\t// Camel-case\n\tconst prop = key\n\t\t.substring(6)\n\t\t.toLowerCase()\n\t\t.replace(/_([a-z])/g, (_, k) => {\n\t\t\treturn k.toUpperCase();\n\t\t});\n\n\t// Coerce string value into JS value\n\tlet val = process.env[key];\n\tif (/^(yes|on|true|enabled)$/i.test(val)) {\n\t\tval = true;\n\t} else if (/^(no|off|false|disabled)$/i.test(val)) {\n\t\tval = false;\n\t} else if (val === 'null') {\n\t\tval = null;\n\t} else {\n\t\tval = Number(val);\n\t}\n\n\tobj[prop] = val;\n\treturn obj;\n}, {});\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n\treturn 'colors' in exports.inspectOpts ?\n\t\tBoolean(exports.inspectOpts.colors) :\n\t\ttty.isatty(process.stderr.fd);\n}\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\tconst {namespace: name, useColors} = this;\n\n\tif (useColors) {\n\t\tconst c = this.color;\n\t\tconst colorCode = '\\u001B[3' + (c < 8 ? c : '8;5;' + c);\n\t\tconst prefix = `  ${colorCode};1m${name} \\u001B[0m`;\n\n\t\targs[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n\t\targs.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\\u001B[0m');\n\t} else {\n\t\targs[0] = getDate() + name + ' ' + args[0];\n\t}\n}\n\nfunction getDate() {\n\tif (exports.inspectOpts.hideDate) {\n\t\treturn '';\n\t}\n\treturn new Date().toISOString() + ' ';\n}\n\n/**\n * Invokes `util.format()` with the specified arguments and writes to stderr.\n */\n\nfunction log(...args) {\n\treturn process.stderr.write(util.format(...args) + '\\n');\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\tif (namespaces) {\n\t\tprocess.env.DEBUG = namespaces;\n\t} else {\n\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\tdelete process.env.DEBUG;\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n\treturn process.env.DEBUG;\n}\n\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\nfunction init(debug) {\n\tdebug.inspectOpts = {};\n\n\tconst keys = Object.keys(exports.inspectOpts);\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tdebug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nformatters.o = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts)\n\t\t.split('\\n')\n\t\t.map(str => str.trim())\n\t\t.join(' ');\n};\n\n/**\n * Map %O to `util.inspect()`, allowing multiple lines if needed.\n */\n\nformatters.O = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts);\n};\n"]},"metadata":{},"sourceType":"script"}