{"ast":null,"code":"/// provides the async helper functionality\nfunction Waiter() {\n  if (!(this instanceof Waiter)) {\n    return new Waiter();\n  }\n\n  var self = this; // found values\n\n  self.values = {}; // callback when done\n\n  self.callback = null;\n  self.resolved = false;\n  self.count = 0;\n}\n\n;\n\nWaiter.prototype.wait = function () {\n  var self = this;\n  ++self.count;\n}; // resolve the promise\n\n\nWaiter.prototype.resolve = function (name, val) {\n  var self = this;\n  self.values[name] = val; // done with all items\n\n  if (--self.count === 0) {\n    self.resolved = true; // we may not have a done callback yet\n\n    if (self.callback) {\n      self.callback(self.values);\n    }\n  }\n}; // sets the done callback for the waiter\n// notifies when the promise is complete\n\n\nWaiter.prototype.done = function (fn) {\n  var self = this;\n  self.callback = fn;\n\n  if (self.resolved) {\n    fn(self.values);\n  }\n};\n\nvar alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_';\n\nvar gen_id = function () {\n  var res = '';\n\n  for (var i = 0; i < 8; ++i) {\n    res += alphabet[Math.floor(Math.random() * alphabet.length)];\n  }\n\n  return res;\n};\n\nmodule.exports = function () {\n  // baton which contains the current\n  // set of deferreds\n  var waiter;\n  var obj = Object.create(null);\n\n  obj.done = function done(fn) {\n    // no async things called\n    if (!waiter) {\n      return fn({});\n    }\n\n    waiter.done(fn); // clear the waiter for the next template\n\n    waiter = undefined;\n  };\n\n  obj.resolve = function resolve(fn, args) {\n    // we want to do async things, need a waiter for that\n    if (!waiter) {\n      waiter = new Waiter();\n    }\n\n    var id = '__' + gen_id() + '__';\n    var cur_waiter = waiter;\n    waiter.wait();\n    args = [].slice.call(args);\n    args.push(function (res) {\n      cur_waiter.resolve(id, res);\n    });\n    fn.apply(null, args); // return the id placeholder\n    // this will be replaced later\n\n    return id;\n  };\n\n  return obj;\n};","map":{"version":3,"sources":["C:/Users/H P/node_modules/hbs/lib/async.js"],"names":["Waiter","self","values","callback","resolved","count","prototype","wait","resolve","name","val","done","fn","alphabet","gen_id","res","i","Math","floor","random","length","module","exports","waiter","obj","Object","create","undefined","args","id","cur_waiter","slice","call","push","apply"],"mappings":"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","sourcesContent":["/// provides the async helper functionality\n\nfunction Waiter() {\n    if (!(this instanceof Waiter)) {\n        return new Waiter();\n    }\n\n    var self = this;\n\n    // found values\n    self.values = {};\n\n    // callback when done\n    self.callback = null;\n\n    self.resolved = false;\n\n    self.count = 0;\n};\n\nWaiter.prototype.wait = function() {\n    var self = this;\n    ++self.count;\n};\n\n// resolve the promise\nWaiter.prototype.resolve = function(name, val) {\n    var self = this;\n\n    self.values[name] = val;\n\n    // done with all items\n    if (--self.count === 0) {\n        self.resolved = true;\n\n        // we may not have a done callback yet\n        if (self.callback) {\n            self.callback(self.values);\n        }\n    }\n};\n\n// sets the done callback for the waiter\n// notifies when the promise is complete\nWaiter.prototype.done = function(fn) {\n    var self = this;\n\n    self.callback = fn;\n    if (self.resolved) {\n        fn(self.values);\n    }\n};\n\nvar alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_';\n\nvar gen_id = function() {\n    var res = '';\n    for (var i=0 ; i<8 ; ++i) {\n        res += alphabet[Math.floor(Math.random() * alphabet.length)];\n    }\n\n    return res;\n};\n\nmodule.exports = function() {\n    // baton which contains the current\n    // set of deferreds\n    var waiter;\n\n    var obj = Object.create(null);\n    obj.done = function done(fn) {\n        // no async things called\n        if (!waiter) {\n            return fn({});\n        }\n\n        waiter.done(fn);\n\n        // clear the waiter for the next template\n        waiter = undefined;\n    };\n\n    obj.resolve = function resolve(fn, args) {\n        // we want to do async things, need a waiter for that\n        if (!waiter) {\n            waiter = new Waiter();\n        }\n\n        var id = '__' + gen_id() + '__';\n\n        var cur_waiter = waiter;\n        waiter.wait();\n\n        args = [].slice.call(args);\n        args.push(function(res) {\n            cur_waiter.resolve(id, res);\n        })\n\n        fn.apply(null, args);\n\n        // return the id placeholder\n        // this will be replaced later\n        return id;\n    };\n\n    return obj;\n};\n"]},"metadata":{},"sourceType":"script"}