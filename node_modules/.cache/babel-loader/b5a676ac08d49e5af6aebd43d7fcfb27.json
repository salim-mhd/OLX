{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _utils = require('../utils');\n\nexports['default'] = function (instance) {\n  instance.registerHelper('with', function (context, options) {\n    if (_utils.isFunction(context)) {\n      context = context.call(this);\n    }\n\n    var fn = options.fn;\n\n    if (!_utils.isEmpty(context)) {\n      var data = options.data;\n\n      if (options.data && options.ids) {\n        data = _utils.createFrame(options.data);\n        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);\n      }\n\n      return fn(context, {\n        data: data,\n        blockParams: _utils.blockParams([context], [data && data.contextPath])\n      });\n    } else {\n      return options.inverse(this);\n    }\n  });\n};\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["../../../../lib/handlebars/helpers/with.js"],"names":[],"mappings":";;;;qBAA+E,U;;qBAEhE,UAAS,QAAT,EAAmB;AAChC,EAAA,QAAQ,CAAC,cAAT,CAAwB,MAAxB,EAAgC,UAAS,OAAT,EAAkB,OAAlB,EAA2B;AACzD,QAAI,MAAA,CAAA,UAAA,CAAW,OAAX,CAAJ,EAAyB;AAAE,MAAA,OAAO,GAAG,OAAO,CAAC,IAAR,CAAa,IAAb,CAAV;AAA+B;;AAE1D,QAAI,EAAE,GAAG,OAAO,CAAC,EAAjB;;AAEA,QAAI,CAAC,MAAA,CAAA,OAAA,CAAQ,OAAR,CAAL,EAAuB;AACrB,UAAI,IAAI,GAAG,OAAO,CAAC,IAAnB;;AACA,UAAI,OAAO,CAAC,IAAR,IAAgB,OAAO,CAAC,GAA5B,EAAiC;AAC/B,QAAA,IAAI,GAAG,MAAA,CAAA,WAAA,CAAY,OAAO,CAAC,IAApB,CAAP;AACA,QAAA,IAAI,CAAC,WAAL,GAAmB,MAAA,CAAA,iBAAA,CAAkB,OAAO,CAAC,IAAR,CAAa,WAA/B,EAA4C,OAAO,CAAC,GAAR,CAAY,CAAZ,CAA5C,CAAnB;AACD;;AAED,aAAO,EAAE,CAAC,OAAD,EAAU;AACjB,QAAA,IAAI,EAAE,IADW;AAEjB,QAAA,WAAW,EAAE,MAAA,CAAA,WAAA,CAAY,CAAC,OAAD,CAAZ,EAAuB,CAAC,IAAI,IAAI,IAAI,CAAC,WAAd,CAAvB;AAFI,OAAV,CAAT;AAID,KAXD,MAWO;AACL,aAAO,OAAO,CAAC,OAAR,CAAgB,IAAhB,CAAP;AACD;AACF,GAnBD;AAoBD,C","sourcesContent":["import {appendContextPath, blockParams, createFrame, isEmpty, isFunction} from '../utils';\n\nexport default function(instance) {\n  instance.registerHelper('with', function(context, options) {\n    if (isFunction(context)) { context = context.call(this); }\n\n    let fn = options.fn;\n\n    if (!isEmpty(context)) {\n      let data = options.data;\n      if (options.data && options.ids) {\n        data = createFrame(options.data);\n        data.contextPath = appendContextPath(options.data.contextPath, options.ids[0]);\n      }\n\n      return fn(context, {\n        data: data,\n        blockParams: blockParams([context], [data && data.contextPath])\n      });\n    } else {\n      return options.inverse(this);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"script"}